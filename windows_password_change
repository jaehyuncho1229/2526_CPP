#############################################
# Windows Password Change Script
# Supports Local and AD users, single and batch changes
# Requires: Run as Administrator
#############################################

param(
    [Parameter()]
    [string]$Username,
    
    [Parameter()]
    [string]$Password,
    
    [Parameter()]
    [string]$CsvFile,
    
    [Parameter()]
    [switch]$GeneratePassword,
    
    [Parameter()]
    [int]$PasswordLength = 16,
    
    [Parameter()]
    [switch]$ForceChangeAtLogon,
    
    [Parameter()]
    [switch]$ADUser,
    
    [Parameter()]
    [switch]$Help
)

# Set strict mode
Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

# Function to display usage
function Show-Usage {
    Write-Host @"

Windows Password Change Script
==============================

PARAMETERS:
    -Username           Username to change password for
    -Password          New password (use with caution)
    -CsvFile           CSV file for batch changes (Headers: Username,Password)
    -GeneratePassword  Generate random secure password
    -PasswordLength    Length of generated password (default: 16)
    -ForceChangeAtLogon Force user to change password at next logon
    -ADUser            Target is Active Directory user (default: local user)
    -Help              Show this help message

EXAMPLES:
    # Generate password for local user
    .\password_change.ps1 -Username "john" -GeneratePassword

    # Set specific password for local user
    .\password_change.ps1 -Username "john" -Password "NewP@ssw0rd123"

    # Batch change from CSV file
    .\password_change.ps1 -CsvFile "users.csv"

    # Change AD user password and force change at logon
    .\password_change.ps1 -Username "john" -Password "TempP@ss123" -ADUser -ForceChangeAtLogon

"@
    exit 0
}

# Function to check if running as administrator
function Test-Administrator {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

# Function to generate secure password
function New-SecurePassword {
    param(
        [int]$Length = 16
    )
    
    # Define character sets
    $uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    $lowercase = "abcdefghijklmnopqrstuvwxyz"
    $numbers = "0123456789"
    $special = "!@#$%^&*()_+-=[]{}|;:,.<>?"
    
    # Ensure at least one character from each set
    $password = ""
    $password += $uppercase[(Get-Random -Maximum $uppercase.Length)]
    $password += $lowercase[(Get-Random -Maximum $lowercase.Length)]
    $password += $numbers[(Get-Random -Maximum $numbers.Length)]
    $password += $special[(Get-Random -Maximum $special.Length)]
    
    # Fill the rest randomly
    $allChars = $uppercase + $lowercase + $numbers + $special
    for ($i = $password.Length; $i -lt $Length; $i++) {
        $password += $allChars[(Get-Random -Maximum $allChars.Length)]
    }
    
    # Shuffle the password
    $passwordArray = $password.ToCharArray()
    $passwordArray = $passwordArray | Get-Random -Count $passwordArray.Length
    return -join $passwordArray
}

# Function to validate password complexity
function Test-PasswordComplexity {
    param(
        [string]$Password
    )
    
    $minLength = 8
    $errors = @()
    
    if ($Password.Length -lt $minLength) {
        $errors += "Password must be at least $minLength characters"
    }
    
    if ($Password -notmatch "[A-Z]") {
        $errors += "Password must contain at least one uppercase letter"
    }
    
    if ($Password -notmatch "[a-z]") {
        $errors += "Password must contain at least one lowercase letter"
    }
    
    if ($Password -notmatch "[0-9]") {
        $errors += "Password must contain at least one number"
    }
    
    if ($Password -notmatch "[^a-zA-Z0-9]") {
        $errors += "Password must contain at least one special character"
    }
    
    if ($errors.Count -gt 0) {
        Write-Host "Password complexity requirements not met:" -ForegroundColor Red
        $errors | ForEach-Object { Write-Host "  - $_" -ForegroundColor Red }
        return $false
    }
    
    return $true
}

# Function to change local user password
function Set-LocalUserPassword {
    param(
        [string]$Username,
        [string]$Password,
        [switch]$ForceChange
    )
    
    try {
        # Check if user exists
        $user = Get-LocalUser -Name $Username -ErrorAction Stop
        
        # Convert password to secure string
        $securePassword = ConvertTo-SecureString $Password -AsPlainText -Force
        
        # Set the password
        Set-LocalUser -Name $Username -Password $securePassword
        
        if ($ForceChange) {
            # Force password change at next logon
            $user | Set-LocalUser -PasswordNeverExpires $false
            net user $Username /logonpasswordchg:yes 2>$null
        }
        
        Write-Host "✓ Password changed successfully for local user: $Username" -ForegroundColor Green
        
        # Log the change
        $logEntry = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Password changed for local user: $Username by $env:USERNAME"
        Add-Content -Path "$env:TEMP\password_changes.log" -Value $logEntry
        
        return $true
    }
    catch {
        Write-Host "✗ Failed to change password for local user: $Username" -ForegroundColor Red
        Write-Host "  Error: $_" -ForegroundColor Red
        return $false
    }
}

# Function to change AD user password
function Set-ADUserPassword {
    param(
        [string]$Username,
        [string]$Password,
        [switch]$ForceChange
    )
    
    try {
        # Check if AD module is available
        if (-not (Get-Module -ListAvailable -Name ActiveDirectory)) {
            throw "Active Directory module not available. Install RSAT or run on a Domain Controller."
        }
        
        Import-Module ActiveDirectory
        
        # Check if user exists
        $adUser = Get-ADUser -Identity $Username -ErrorAction Stop
        
        # Convert password to secure string
        $securePassword = ConvertTo-SecureString $Password -AsPlainText -Force
        
        # Set the password
        Set-ADAccountPassword -Identity $Username -NewPassword $securePassword -Reset
        
        if ($ForceChange) {
            # Force password change at next logon
            Set-ADUser -Identity $Username -ChangePasswordAtLogon $true
        }
        
        # Enable account if disabled
        if (-not $adUser.Enabled) {
            Enable-ADAccount -Identity $Username
            Write-Host "  Account was disabled - now enabled" -ForegroundColor Yellow
        }
        
        Write-Host "✓ Password changed successfully for AD user: $Username" -ForegroundColor Green
        
        # Log the change
        $logEntry = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Password changed for AD user: $Username by $env:USERNAME"
        Add-Content -Path "$env:TEMP\password_changes.log" -Value $logEntry
        
        return $true
    }
    catch {
        Write-Host "✗ Failed to change password for AD user: $Username" -ForegroundColor Red
        Write-Host "  Error: $_" -ForegroundColor Red
        return $false
    }
}

# Function to process batch password changes
function Process-BatchPasswordChange {
    param(
        [string]$CsvFile,
        [switch]$ADUser,
        [switch]$ForceChange
    )
    
    if (-not (Test-Path $CsvFile)) {
        Write-Host "Error: CSV file not found: $CsvFile" -ForegroundColor Red
        exit 1
    }
    
    $users = Import-Csv $CsvFile
    $successCount = 0
    $failCount = 0
    
    Write-Host "Starting batch password change..." -ForegroundColor Yellow
    Write-Host "----------------------------------------"
    
    foreach ($user in $users) {
        if (-not $user.Username -or -not $user.Password) {
            Write-Host "Skipping invalid entry (missing username or password)" -ForegroundColor Yellow
            $failCount++
            continue
        }
        
        # Validate password complexity
        if (-not (Test-PasswordComplexity -Password $user.Password)) {
            Write-Host "Skipping user $($user.Username) due to password complexity" -ForegroundColor Red
            $failCount++
            continue
        }
        
        # Change password
        if ($ADUser) {
            $result = Set-ADUserPassword -Username $user.Username -Password $user.Password -ForceChange:$ForceChange
        }
        else {
            $result = Set-LocalUserPassword -Username $user.Username -Password $user.Password -ForceChange:$ForceChange
        }
        
        if ($result) {
            $successCount++
        }
        else {
            $failCount++
        }
        
        Write-Host "----------------------------------------"
    }
    
    Write-Host "`nBatch operation completed:" -ForegroundColor Green
    Write-Host "  ✓ Successful: $successCount" -ForegroundColor Green
    Write-Host "  ✗ Failed: $failCount" -ForegroundColor Red
}

# Function to securely read password
function Read-SecurePassword {
    $password1 = Read-Host "Enter new password" -AsSecureString
    $password2 = Read-Host "Confirm password" -AsSecureString
    
    # Convert to plain text for comparison
    $plain1 = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($password1))
    $plain2 = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($password2))
    
    if ($plain1 -ne $plain2) {
        Write-Host "Error: Passwords do not match" -ForegroundColor Red
        exit 1
    }
    
    return $plain1
}

# Main script logic
function Main {
    # Show help if requested
    if ($Help) {
        Show-Usage
    }
    
    # Check if running as administrator
    if (-not (Test-Administrator)) {
        Write-Host "Error: This script must be run as Administrator" -ForegroundColor Red
        Write-Host "Please run PowerShell as Administrator and try again." -ForegroundColor Yellow
        exit 1
    }
    
    # Batch mode
    if ($CsvFile) {
        Process-BatchPasswordChange -CsvFile $CsvFile -ADUser:$ADUser -ForceChange:$ForceChangeAtLogon
        exit
    }
    
    # Single user mode
    if ($Username) {
        # Generate password if requested
        if ($GeneratePassword) {
            $Password = New-SecurePassword -Length $PasswordLength
            Write-Host "Generated password: $Password" -ForegroundColor Yellow
            Write-Host "Please save this password securely!" -ForegroundColor Red
        }
        elseif (-not $Password) {
            # If no password provided, read securely
            $Password = Read-SecurePassword
        }
        
        # Validate password complexity
        if (-not (Test-PasswordComplexity -Password $Password)) {
            exit 1
        }
        
        # Change password
        if ($ADUser) {
            Set-ADUserPassword -Username $Username -Password $Password -ForceChange:$ForceChangeAtLogon
        }
        else {
            Set-LocalUserPassword -Username $Username -Password $Password -ForceChange:$ForceChangeAtLogon
        }
        
        exit
    }
    
    # No valid parameters provided
    Show-Usage
}

# Run main function
Main
